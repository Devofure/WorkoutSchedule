name: Android CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  Continuous-Delivery:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: gradle

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Cache Gradle dependencies
        uses: actions/cache@v4.0.2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Decode the keystore file
        run: |
          base64 --decode keystore.jks.enc.base64 > keystore.jks.enc

      - name: Decrypt the keystore file
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        run: |
          openssl enc -d -aes-256-cbc -pbkdf2 -in keystore.jks.enc -out keystore.jks -pass pass:${{ secrets.ENC_STORE_PASSWORD }}

      - name: Set up environment variables for signing
        run: |
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
          echo "STORE_FILE=../keystore.jks" >> $GITHUB_ENV
          echo "STORE_PASSWORD=${{ secrets.STORE_PASSWORD }}" >> $GITHUB_ENV

      - name: Run Instrumented Tests
        uses: reactivecircus/android-emulator-runner@v2.31.0
        with:
          api-level: 29
          script: ./gradlew connectedCheck

      - name: Run Unit Tests
        run: ./gradlew test

      - name: Run Lint
        run: ./gradlew lint

      - name: Upload to Firebase App Distribution
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          echo $FIREBASE_SERVICE_ACCOUNT > app/service-account.json
          ./gradlew assembleRelease appDistributionUploadRelease -PfirebaseServiceCredentials=app/service-account.json

      - name: Clean up
        run: rm app/service-account.json